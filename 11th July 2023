Challenge 1 : https://leetcode.com/problems/maximum-average-subarray-i/
Solution :- 

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        double maxAvg = -100000, avg;
        int n = nums.size();
        double sum = 0;
        int i=0, j=0;
        while(j < n) {
            sum += nums[j];
            if(j-i+1 < k)
                j++;
            else if(j-i+1 == k) {
                avg = sum/k;
                maxAvg = max(maxAvg, avg);
                sum -= nums[i];
                i++;
                j++;
            }
        }
        return maxAvg;
    }
};

Challenge 2 : https://leetcode.com/problems/first-missing-positive/
Solution :-

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int i = 0, n = nums.size();
        while(i < n){
            if(nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i])
                swap(nums[i], nums[nums[i]-1]);
            else
                i++;
        }
        for(i = 0; i < n; ++i){
            if(nums[i] != (i+1))
                return i+1;
        }
        return n+1;
    }
};
