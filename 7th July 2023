Challenge 1 : https://leetcode.com/problems/next-permutation/
Solution :-

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int i;
        for(i=n-1; i>=1; i--) {
            if(nums[i-1] < nums[i]) {
                for(int j=n-1; j>=1; j--) {
                    if(nums[i-1] < nums[j]) {
                        nums[i-1] = nums[i-1] + nums[j];
                        nums[j] = nums[i-1] - nums[j];
                        nums[i-1] = nums[i-1] - nums[j];
                        break;
                    }
                }
                break;
            }
        }
        reverse(nums.begin()+i, nums.end());
    }
};

Challenge 2 : https://leetcode.com/problems/make-two-arrays-equal-by-reversing-subarrays/
Solution :- 

class Solution {
public:
    bool canBeEqual(vector<int>& target, vector<int>& arr) {
        sort(target.begin(), target.end());
        sort(arr.begin(), arr.end());
        return arr == target;
    }
};
